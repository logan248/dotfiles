#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;



if tput setaf 1 &> /dev/null; then
  orange=$(tput setaf 116); #116
  yellow=$(tput setaf 228); #136
  green=$(tput setaf 76); #64
  white=$(tput setaf 15);
  black=$(tput setaf 0);
  blue=$(tput setaf 33); #153
  cyan=$(tput setaf 37);
  purple=$(tput setaf 125);
  red=$(tput setaf 124);
  violet=$(tput setaf 61);
  bold=$(tput bold);
  reset=$(tput sgr0);
else
  orange="\e[1;33m";
  yellow="\e[1;33m";
  green="\e[1;32m";
  white="\e[1;37m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  purple="\e[1;35m";
  red="\e[1;31m";
  violet="\e[1;35m";
  bold=" ";
  reset="\e[0m";
fi

staged_char="${bold}${red}+${reset}"
unstaged_char="${bold}${red}!${reset}"
untracked_char="${bold}${red}?${reset}"
stashed_char="${bold}${red}\$${reset}"
branch_style="${cyan}"
function _git_status(){
  git status --porcelain 2> /dev/null
}

function _git_status_counts {
  _git_status | awk '
  BEGIN {
  untracked=0;
  unstaged=0;
  staged=0;
  }
  {
    if ($0 ~ /^\?\? .+/) {
      untracked += 1
    } else {
      if ($0 ~ /^.[^ ] .+/) {
        unstaged += 1
      }
      if ($0 ~ /^[^ ]. .+/) {
        staged += 1
      }
    }
  }
  END {
    print staged "\t" unstaged "\t" untracked
  }'
}


function _git-num-remotes {
  git remote | wc -l
}


#echo "${staged_count} ${unstaged_count} ${untracked_count}"

prompt_git() {
	local branch_name git_stat git_info remote st us ut stashed

    counts=$'\t' read -r staged_count unstaged_count untracked_count <<< "$(_git_status_counts)"
	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return;

	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branch_name="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	# Early exit for Chromium & Blink repo, as the dirty check takes too long.
	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		remote='*'
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
            st="${staged_char}${staged_count}"
		fi;

		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
            us="${unstaged_count}${unstaged_char}"
		fi;

		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            ut="${untracked_count}${untracked_char}"
		fi;

		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			stashed="${stashed_char}"
		fi;
	fi;

    git_stat="${remote} ${st} ${us} ${ut} ${stashed}"

	[ -n "${git_stat}" ] && git_info="${git_stat}";

	#echo -e "${1}${branchName}${2}${s}";
    echo -e "${white}on ${branch_style}${branch_name}${reset}${git_info}"
}

virtualenv_info(){
    # Get Virtual Env
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        venv="${VIRTUAL_ENV##*/}"
        #venv=`basename "$VIRTUAL_ENV"`

        [[ -n "$venv" ]] && echo "(venv:$venv)"
    fi
}

# disable the default virtualenv prompt change
export VIRTUAL_ENV_DISABLE_PROMPT=1

#VENV="$(virtualenv_info)"

case $TERM in
    xterm*)
        title="\[\033]0;\w\007\]"
        ;;
    *)
        title=""
        ;;
esac

prompt() {

    # If not running interactively, don't do anything
    [[ $- != *i* ]] && return

    local title_bar='${title}'
    local virtualenv="\[${blue}\]\$(virtualenv_info)\[${reset}\] "
    local _git="\$(prompt_git)\[${reset}\]"
    local user_host='\[${orange}\]Lemick \[${white}\]at \[${yellow}\]\h \[${white}\]in \[${reset}\]'
    local dir='\[${blue}\]\W \[${reset}\]'
    local prompt_char='\[${white}\]>_ \[${reset}\]'

    PS1="${title}\n${virtualenv}${_git}\n${user_host}${dir}\n${prompt_char}"
}

prompt
